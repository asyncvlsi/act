import "globals.act";
import "channel.act";

namespace env {

/*

   Sources and sinks

 */
defproc source_cell (bool l, le, s, se, r, re)
{
        bool x, y;
        s = r;
        prs {
                ~Reset & ~x & ~y & l -> le-
                ~Reset &  ~y & ~le -> x+
                Reset | x & ~y & ~l -> le+
                ~Reset & x & le -> y+
                ~Reset & x & y & se & re -> s+
                Reset | y & s -> x-
                 Reset | ~x & y & ~se & ~re -> s-
                Reset | ~x & ~s -> y-
        }
}

defproc start_cell (bool l, le, r, re)
{
        bool x, y;
        prs {
                ~Reset & ~x & ~y & re -> r+
                ~Reset & ~y & r -> x+
                Reset | x & ~y & ~re -> r-
                ~Reset & x & ~r -> y+
                ~Reset & x & y & l -> le-
                Reset | y & ~le -> x-
                Reset | ~x & y & ~l -> le+
                Reset | ~x & le -> y-
        }
}

template <pint N, M; pint d[N]>
defproc source_e(e1of<M> rr)
{
        d1of<M> r;
        e1of<N> s;
        s.e = rr.e;
        bool l[N+1], le[N+1];
        source_cell sc[N];
        (;i:N:
                sc[i](l[i], le[i], s.d[i], s.e, l[i+1], le[i+1]);
        )
        start_cell startc(l[N], le[N], l[0], le[0]);
        prs {
                (i:N: s.d[i] -> r.d[d[i]]+ )
                (i:M: (&:j:N: ~s.d[j] ) -> r.d[i]- )
                (i:M: r.d[i] -> rr.d[i]+)
                (i:M: ~r.d[i] -> rr.d[i]-)
        }
}


/**
        Source a user-specified series of values.
*/
export template <pint N; pint d[N]>
defproc source_e1of2(e1of2 r) {
        e1of<2> s;
        s.d = r.d;
        s.e = r.e;
        source_e<N,2,d> src(s);
}

/**
        Random source.
*/
defproc rsource_e1of2 (e1of2 r) 
{
        bool _r0, _r1;
        prs {
                r.e & ~Reset => _r0-
                r.e & ~Reset => _r1-
                _r0 => r.f-
                _r1 => r.t-
        }
        spec {
                mk_excllo(_r0, _r1)
        }
}

export defproc sink_e1of2(e1of2 l)
{
        prs {
                ~Reset & (l.f | l.t) -> l.e-
                Reset | ~l.f & ~l.t -> l.e+
        }
}


}
