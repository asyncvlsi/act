import "globals.act";
import "channel.act";

defproc delaybuf(bool in, out)
{
  bool _x;
  prs {
     in => _x-
     _x => out-
  }
}

template<pint D>
defproc delay (bool in, out)
{
  delaybuf d[D];
  (i:D-1:d[i].out=d[i+1].in;)
  d[0].in = in;
  d[D-1].out = out;
}

defproc bundled_cmp_1 (bool go_r; dualrail c[4]; dualrail out)
{
  /* combinational logic */
  delay<4> d;
  d.in = go_r;

  prs {
    d.out & c[0].t => out.t+
    d.out & c[0].f => out.f+
  }
}

template<pint N>
defproc bundled_add_N (bool go_r; dualrail in1[N], in2[N], c_in; dualrail out[N])
{
  /* combinational logic */
  delay<N-1> d;
  d.in = go_r;

  _dualrail _s[N];
  _dualrail _out[N];

  syn_add<N> add_N;

  (i:N: in1[i] = add_N.in1[i];)
  (i:N: in2[i] = add_N.in2[i];)
  add_N.c_in = c_in;

  prs {
    (i:N: add_N.out[i].t => _s[i].t-
          add_N.out[i].f => _s[i].f-)

    (i:N: d.out & _s[i].t => _out[i].f-
          d.out & _s[i].f => _out[i].t-)

    (i:N: _out[i].t => out[i].t-
          _out[i].f => out[i].f-)
  }
}

defproc bundled_fblock_8 (bool go_r; dualrail c[4]; dualrail x[8], y[8]; dualrail out[8])
{
   /* combinational logic */
   delay<4> d;
   d.in = go_r;

   prs {
      (i:8: d.out & x[i].t => out[i].t+
            d.out & x[i].f => out[i].f+)
   }
}
