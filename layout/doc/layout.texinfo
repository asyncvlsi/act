\newbox\warningbox  % @c -*-texinfo-*-
\hfuzz=5pt
@iftex 
{\dimen2 = .55pt % Thickness of rules
  \dimen0 = 5em% Width of the box.
\font\textsf=cmss10 scaled \magstephalf
\setbox0 = \hbox{\kern-.75pt \textsf warning\kern-1.5pt}
\global\setbox\warningbox=\hbox to \dimen0{\hfil
   \hsize = \dimen0 \advance\hsize by -5.8pt % Space to left+right.
   \advance\hsize by -2\dimen2 % Rules.
   \vbox{
      \hrule height\dimen2
      \hbox{\vrule width\dimen2 \kern3pt          % Space to left of text.
         \vtop{\kern2.4pt \box0 \kern2.4pt}% Space above/below.
         \kern3pt\vrule width\dimen2}% Space to right.
      \hrule height\dimen2}
    \hfil}
\global\def\warning{\leavevmode\lower.7ex\copy\warningbox}}
@end iftex
\input texinfo
@c %**start of header
@setfilename layout
@settitle ACT Layout Tools
@setchapternewpage odd
@paragraphindent 0
@c
@c %**end of header

@c ------------------------------------------------------------------------
@c  Copyright notice
@c ------------------------------------------------------------------------

@ifinfo
This document describes the layout tools used by the Asynchronous Circuit
Toolkit (ACT), and how to write new tools that use the layout library.

Copyright @copyright{} 2018 Rajit Manohar

All Rights Reserved.
@end ifinfo

@c ------------------------------------------------------------------------
@c  Title page
@c ------------------------------------------------------------------------

@titlepage
@title ACT Layout Tools
@subtitle Layout tools and libraries
@author Rajit Manohar

@c ------------------------------------------------------------------------
@c  Copyright notice
@c ------------------------------------------------------------------------

@page
@vskip 0pt plus 1filll
This document describes the layout tools used by the Asynchronous Circuit
Toolkit (ACT), and how to write new tools that use the layout library.

@vskip 1cm

Copyright @copyright{} 2018 Rajit Manohar

All Rights Reserved.
@end titlepage

@c ------------------------------------------------------------------------
@c   Top node
@c ------------------------------------------------------------------------

@ifinfo
@node    Top, Introduction, (dir), (dir)

This document describes the layout tools used by the Asynchronous Circuit
Toolkit (ACT), and how to write new tools that use the layout library.

@menu
Select a chapter using the `m' key

* Introduction::        A brief introduction with simple examples.
* Technology file::     Describing geometric constraints for a technology.

Appendices.

* Errors and Warnings:: Index of errors and warnings printed by the library.
* Function Index::      Index of functions that are part of the library.
* Concept Index::       Index of concepts.

@end menu

@end ifinfo

@c ------------------------------------------------------------------------
@c     Introduction
@c ------------------------------------------------------------------------

@node Introduction,  Simple example, Top, Top
@comment node-name, next, previous, up

@chapter A Tutorial Introduction

@cindex introduction

@menu
* Simple example::      A simple example of how @sc{act} can be used.
@end menu

@c ------------------------------------------------------------------------
@c   Simple example
@c ------------------------------------------------------------------------
@node Simple example,  Technology file, Top, Introduction
@comment  node-name,  next,  previous,  up

@section A Simple Example

Something goes here

@c ------------------------------------------------------------------------


@c ------------------------------------------------------------------------
@c   Types
@c ------------------------------------------------------------------------

@node Technology file,  Header, Top, Top
@comment  node-name,  next,  previous,  up

@chapter Technology file

The technology file contains information that is specific to the
manufacturing technology being targetted. This information is in the
form of abstract constraints and electrical information. The
specifications contained in this file are not general enough to capture
the complete design rule manual for a technology. However, they are
sufficient for the layout library to generate design-rule clean
geometry.

@menu
Select a section using the 'm' key

* Header::  The preamble of the technology file
* Transistors:: Specifying rules for diffusion, selects, polysilicon
* Metal rules:: Specifying metal
* Contacts:: Specifying connections between layers
* Directives:: Specifying constraints and directives for the layout generator
* SCMOS_SUBM Example:: A complete example using MOSIS SCMOS_SUBM rules

@comment * Electrical:: Electrical information
@comment * Translations:: Layer names to be emitted

@end menu

@node Header,  Transistors, Technology file, Technology file

@section File header

The technology file header contains general information that
identifies the technology node, the creation date of the file, and
basic information about the rest of the technology. The configuration
file uses the same general format as a standard configuration file
used by all the tools.

The two items that specify this are the name and date.
@example
begin info
   string name "A ficticious 0.6um process"
   string date "Created on Jan 1, 2017 by Rajit Manohar"
end
@end example

All dimensions specified in the technology file are integer
valued. Conversion from integers to nanometers is through the
@code{scale} parameter.

@example
begin general
   real scale 300   # units are 300 nanometers
end 
@end example

The number and configuration of the metal layers used by the
technology specification are provided in the header as well.

@example
begin general
   int metals 3  # 3 metal layers being used
end
@end example

The layout generator assumes there is a select layer that contains all
the devices and polysilicon, followed by metal layers numbered from
one onward. This is used when specifying contacts, and the assumption
is that contacts are always between adjacent layers. If the
technology permits stacked contacts, that is specified in the header.

@example
begin general
   int stacked_contacts 1  # stacked contacts are supported
@end example

The last property that is important is the number of different types
of transistors in the technology. When specifying a circuit, there are
a number of basic types of p-type and n-type transistors used, with
the default being ``standard threshold voltage'' (@code{svt}). There
are also high (@code{hvt}) and low (@code{lvt}) threshold devices, as
well as I/O devices (@code{io}) that have thicker oxides. Each of
these transistor types correspond to different select/diffusion
types. The transistors combined with polysilicon all have to be drawn
on a single abstract layer that is called @code{diff} (for
diffusion). The next set of items in the header specifies the
transistor types supported by the technology, and their corresponding
diffusion layer.

@example
begin diff
   string_table types "svt" "hvt"
   string_table ptype "pdiff" "hvtpdiff"
   string_table ntype "ndiff" "hvtndiff"
   string_table pfet "ptransistor" "hvtptransistor"
   string_table pfet_well "nwell" "nwell"
   string_table nfet "ntransistor" "hvtntransistor"
   string_table nfet_well "" ""
end
@end example

The number of @code{types} corresponds to the number of different
types of material that share the diffusion layer. This number is twice
the number of transistor types plus one for polysilicon. The example
above specifies @code{svt} and @code{hvt} devices. The mapping is from
device type to layer type. Note that the order of the @code{ptype} and
@code{ntype} devices must match the order of the transistor
@code{types}. Finally, for each transistor type, there are well layers
(which may be empty indicating that no well layer is needed).

@unnumberedsubsec Table formats for drawing rules

Simple drawing rules for a material can be specified using minimum
width and minimum spacing rules. This used to be sufficient for older
CMOS technologies. More modern technologies have more complex rules,
that are of the form: ``if some other dimension is in the range
[@var{a},@var{b}], then the minimum width/spacing/overhang is
@var{c}'' which can be specified by a tuple (@var{a}, @var{b},
@var{c}). To specify rules of this type, we use integer @dfn{range
tables}. Tables of this type will have 2@var{n}+1@ entries, where @var{n}
is the number ranges to be specified, with the last entry being the
value of @var{c} for all other ranges. To specify a collection rules of
the type (@var{a0},@var{b0},@var{c0}), (@var{b0+1},@var{b1},@var{c1}),
(@var{b1+1},@var{b2}, @var{c2}), etc. we assume the ranges cover all possible
values of the the ``other dimension.'' This means that @var{a0}@ is
implicit---it is the minimum legal value (can be taken as zero if
necessary). The table will be specified with entries @var{b0},
@var{c0}, @var{b1}, @var{c1}, @var{b2}, @var{c2}, etc.

For illustration purposes, we know that in some modern technologies,
polysilicon overhang over diffusion can depend on the width of the
polysilicon drawn.

@example
 int_table overhang 8 4 12 6 8
@end example

This specifies that: for widths [0,8] the overhang is 4 units; for
widths [9,12] the overhang is 6 units; for all other widths, the
overhang is 8 units.

@node Transistors, Metal rules, Header, Technology file

@section Materials for transistors

The materials section contains all the information about the materials
that the layout library uses. These materials have standard names
(strongly related to the names used by the open-source @code{magic} VLSI
layout editor), and the technology file contains information that can be
used to map these layers to actual geometry. All layout is specified in
abstract layers. The concrete layers are generated from the abstract
layers.

For each diffusion type specified in the header, there must be an
entry that corresponds to the rules used to draw the material. There
are several parameters that can be specified, all integers. The entire
set of parameters are specified within a begin/end section of the
configuration file:

@example
begin materials
   begin pdiff
      # pdiff parameters go here
   end
   begin ndiff
      # ndiff parameters go here
   end
   begin ptransistor
      # ptransistor parameters go here
   end
   begin ntransistor
      # ntransistor parameters go here
   end
   begin nwell
      # nwell rules go here
   end
   begin polysilicon
      # polysilicon rules go here
   end
end
@end example

For each type of diffusion, the basic parameters to be specified are:

@itemize @bullet
@item @code{width}: the minimum width of the material
@item @code{spacing}: a table that specifies the spacing of the
diffusion to other diffusions of the same type (type = ptype or
ntype). The order of entries in this table corresponds to the order in
the @code{ptype}/@code{ntype} table.
@item @code{oppspacing}: a table that specifies the spacing of the
diffusion to other diffusions of the other type (type = ptype or
ntype). The order of entries in this table corresponds to the order in
the @code{ntype}/@code{ptype} table.
@item @code{polyspacing}: spacing to polysilicon
@item @code{notchspacing}: if the diffusion has a notch, the spacing
between the two sides of the (U-shaped) notch
@item @code{overhang}: a range table that specifies the diffusion overhang
depending on the width of the transistor (i.e. polysilicon) it
overhangs. This is used for drawing the end of a transistor stack
(sometimes called a channel-connected region).
@item @code{via} section: 
@itemize @minus
@item @code{edge}: minimum spacing to the edge of the diffusion
@item @code{fet}: minimum spacing to transistor (i.e. poly on diffusion)
@end itemize
@end itemize

For each type of transistor, the basic parameters to be specified are:

@itemize @bullet
@item @code{width}: this would normally be the width of polysilicon
@item @code{spacing}: minimum spacing range table, where the dimension
used is the width of the transistor.
@end itemize

For each type of well, the basic parameters are:

@itemize @bullet
@item @code{width}: the minimum width of the well
@item @code{overhang}: minimum overhang of well from diffusion edge
@item @code{spacing}: a table of spacing rules to wells of the same
type
@item @code{oppspacing}: a table of spacing rules to wells of the
opposite type
@end itemize

All transistors are drawn by polysilicon intersecting with
diffusion. The type of transistor is determined by the type of
diffusion. Polysilicon is the one unusual layer in that it may also
get used for routing, even though its primary purpose is to define
transistors. The polysilicon section has:

@itemize @bullet
@item @code{width}: minimum width
@item @code{spacing}: minimum spacing range table, where the dimension
used is the width of the polysilicon (i.e. different spacings for
different widths). Note that spacing/width here is combined with the
spacing/width for the transistor type when drawing transistors.
@item @code{pitch}: if this is specified, then all polysilicon has to
snap to the specified pitch (left edge for vertical drawing, bottom
edge for horizontal drawing).
@item @code{direction}: specify a hard constraint on how polysilicon can be
drawn. 0 = no constraint, 1 = vertical only, 2 = horizontal only
@item @code{minarea}: the minimum area of the material
@item @code{minturn}: an integer that specifies that if you turn 90
degrees, the minimum amount of material that you have to draw in the
new direction. If this is -1, then turns are not allowed.
@item @code{endofline}: this is the amount one has to extend the end
of line for design rule checking.
@item @code{overhang}: a range table that specifies the overhang of
poly over diffusion. The range dimension corresponds to the width of
the polysilicon/transistor.
@item @code{notch_overhang}: a range table that specifies the overhang
over diffusion in the case of a diffusion notch.
@item @code{via} section:
@itemize @minus
@item @code{nspacing}: a spacing table for a poly via to different
types of n-type diffusion
@item @code{pspacing}: a spacing table for a poly via to different
types of p-type diffusion
@end itemize
@end itemize


@c ------------------------------------------------------------------------

@node Metal rules, Contacts, Transistors,  Technology file

@section Metal layers

Metal layer rules are a subset of the rules used for
polysilicon. Essentially they are similar except for the rules related
to diffusion/transistors. The items within the metal specification are:

@itemize @bullet
@item @code{width}: minimum width range table, where the dimension is the
length of the metal (i.e. different widths for different lengths)
@item @code{spacing}: minimum spacing range table, where the dimension
used is the width of the metal (i.e. different spacings for
different widths). 
@item @code{pitch}: if this is specified, then all metal has to
snap to the specified pitch (left edge for vertical drawing, bottom
edge for horizontal drawing).
@item @code{direction}: specify a hard constraint on how polysilicon can be
drawn. 0 = no constraint, 1 = vertical only, 2 = horizontal only
@item @code{minarea}: the minimum area of the material
@item @code{minturn}: an integer that specifies that if you turn 90
degrees, the minimum amount of material that you have to draw in the
new direction. If this is -1, then turns are not allowed.
@item @code{endofline}: this is the amount one has to extend the end
of line for a metal for design rule checking
@end itemize

Since many metal layers have similar rules, the metal section
typically is written like this:

@example
begin materials
   begin metal
     begin 1x
       # rules for 1x metal go here
     end
     begin 2x
       # rules for 2x metal go here
     end

     string m1 "1x"
     string m2 "1x"
     string m3 "2x"
   end
end
@end example

The metal layers are named @code{m1} to @code{mN}@ where
@code{N} is the number of metal layers.

@c ------------------------------------------------------------------------

@node Contacts, Directives, Metal rules, Technology file

@section Contacts

The layout generator draws a contact between two layers, which
consists of a via plus the two layers being connected. Each layer is
drawn using the minimum via surround rules. One of the complexities of
drawing contacts is that this minimal amount of material by itself may
not satisfy the design rule constraints, because each material might
have minimum area rules, and contacts might have asymmetric material
surround requirements.

There are two basic types of contacts: symmetric and asymmetric
contacts. Both have a minimum via surround requirement in terms of the
materials they connect. In symmetric contacts, that is sufficient to
create the contact. In asymmetric contacts, you also need a larger
minimum surround on two opposite sides of the contact. Technologies
sometimes support both contact types. The way all of this is specified
is the following:

@example
begin contacts
   begin pdiff
     # rules go here
   end
end
@end example

The rules are:

@itemize @bullet
@item @code{width}: the width of via (assumed to be square and fixed size)
@item @code{spacing}: the spacing between vias
@item @code{sym} section for symmetric vias
@itemize @minus
@item @code{surround}: the minimum surround on both layers being connected
@end itemize
@item @code{asym} section for asymmetric vias
@itemize @minus
@item @code{surround}: the minimum surround on both layers being
connected
@item @code{opp}: the minimum surround on two opposite sides
@end itemize
@end itemize


@node Directives, , Contacts, Technology file

@section Directives

Something  goes here


@node SCMOS_SUBM Example, , Directives, Technology file

@example
begin info
  string name "SCMOS_SUBM.30 rules"
  string date "Created on Feb 26, 2018 by Rajit Manohar"
end

begin general
  real scale 300           # lambda=0.3um=300nm
  int metals 3             # three metal layers
  int stacked_contacts 0   # no stacked via support (actually it does...)
end

begin diff
  string_table types "svt"          # only svt devices
  string_table ptype "pdiff"        # p diffusion
  string_table ntype "ndiff"        # n diffusion
  string_table pfet  "ptransistor"  # fets
  string_table pfet_well "nwell"    # well for p-fet
  string_table nfet  "ntransistor"  # fets
  string_table nfet_well ""         # nwell process, no pwells needed
end
  
@end example



@c ------------------------------------------------------------------------

@c ------------------------------------------------------------------------
@c     Table of warnings and errors
@c ------------------------------------------------------------------------

@node Errors and Warnings,  Function Index, Technology file, Top
@comment  node-name,  next,  previous,  up

@unnumbered Warning and Error messages

Warning and error messages are generated by @sc{act} when parsing the
input as well as when expanding the @sc{act} hierarchy. Typically, any
error that can be checked statically is checked at parse time. All other
errors are reported when flattening the @sc{act} hierarchy. When an
error is reported, some feedback regarding where the error occurred is
provided. Parse errors include the file name and line number where the
error occurred. Errors reported when flattening the hierarchy (such as
array bounds errors) include the name of the instance variable and the
type being instantiated when the error occurred.

@printindex ky

@c ------------------------------------------------------------------------
@c     Function Index
@c ------------------------------------------------------------------------

@node Function Index,  Concept Index, Errors and Warnings, Top
@comment  node-name,  next,  previous,  up

@unnumbered Function Index

@printindex fn

@c ------------------------------------------------------------------------
@c     Concept Index
@c ------------------------------------------------------------------------

@node  Concept Index,  , Top, Top

@unnumbered Concept Index

@printindex cp

@contents

@bye
